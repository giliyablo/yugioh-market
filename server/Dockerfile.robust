# Robust server build that handles npm integrity issues
FROM node:20-alpine

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with multiple fallback strategies
RUN set -ex && \
    # Strategy 1: Try npm ci with integrity bypass
    (npm ci --no-audit --no-fund --ignore-scripts --legacy-peer-deps || \
    # Strategy 2: Clear cache and try again
    (npm cache clean --force && \
     rm -rf node_modules package-lock.json && \
     npm install --no-audit --no-fund --legacy-peer-deps) || \
    # Strategy 3: Use npm install instead of ci
    (rm -rf node_modules package-lock.json && \
     npm install --no-audit --no-fund --legacy-peer-deps --no-package-lock) || \
    # Strategy 4: Last resort - install without lockfile
    (rm -rf node_modules package-lock.json && \
     npm install --no-audit --no-fund --legacy-peer-deps --no-package-lock --force))

# Copy application code
COPY . .

# Expose port
EXPOSE 5000

# Start the application
CMD ["node", "index.js"]
