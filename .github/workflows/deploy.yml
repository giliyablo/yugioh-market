name: Build and Deploy to GCP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: fourth-arena-474414-h6
  REGION: us-central1
  SERVER_SERVICE: tcg-marketplace-server
  CLIENT_SERVICE: tcg-marketplace-client

jobs:
  # Build and test
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # Test server
      - name: Install server dependencies
        run: |
          cd server
          npm ci

      - name: Run server tests
        run: |
          cd server
          npm test || echo "No tests found, continuing..."

      # Test client
      - name: Install client dependencies
        run: |
          cd client
          npm ci

      - name: Run client tests
        run: |
          cd client
          npm test || echo "No tests found, continuing..."

      - name: Build client
        run: |
          cd client
          npm run build

  # Build and push Docker images
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build and push server image
        run: |
          cd server
          docker build -t gcr.io/$PROJECT_ID/$SERVER_SERVICE:$GITHUB_SHA .
          docker build -t gcr.io/$PROJECT_ID/$SERVER_SERVICE:latest .
          docker push gcr.io/$PROJECT_ID/$SERVER_SERVICE:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/$SERVER_SERVICE:latest

      - name: Build and push client image
        run: |
          cd client
          docker build -t gcr.io/$PROJECT_ID/$CLIENT_SERVICE:$GITHUB_SHA .
          docker build -t gcr.io/$PROJECT_ID/$CLIENT_SERVICE:latest .
          docker push gcr.io/$PROJECT_ID/$CLIENT_SERVICE:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/$CLIENT_SERVICE:latest

  # Deploy to Cloud Run
  deploy-server:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy server to Cloud Run
        run: |
          gcloud run deploy $SERVER_SERVICE \
            --image gcr.io/$PROJECT_ID/$SERVER_SERVICE:$GITHUB_SHA \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --port 5000 \
            --memory 2Gi \
            --cpu 2 \
            --min-instances 1 \
            --max-instances 10 \
            --set-env-vars NODE_ENV=production,PORT=5000

      - name: Get server URL
        id: server-url
        run: |
          SERVER_URL=$(gcloud run services describe $SERVER_SERVICE --platform managed --region $REGION --format 'value(status.url)')
          echo "SERVER_URL=$SERVER_URL" >> $GITHUB_OUTPUT
          echo "Server deployed at: $SERVER_URL"

  deploy-client:
    needs: deploy-server
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy client to Cloud Run
        run: |
          gcloud run deploy $CLIENT_SERVICE \
            --image gcr.io/$PROJECT_ID/$CLIENT_SERVICE:$GITHUB_SHA \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --port 80 \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 1 \
            --max-instances 5 \
            --set-env-vars VITE_API_URL=${{ needs.deploy-server.outputs.server-url }}/api

      - name: Get client URL
        run: |
          CLIENT_URL=$(gcloud run services describe $CLIENT_SERVICE --platform managed --region $REGION --format 'value(status.url)')
          echo "Client deployed at: $CLIENT_URL"
          echo "üåç Your application is live at: $CLIENT_URL"

  # Deploy to Firebase Hosting (alternative)
  deploy-firebase:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd client
          npm ci

      - name: Build client
        run: |
          cd client
          npm run build

      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          channelId: live
          projectId: ${{ env.PROJECT_ID }}