name: Build and Deploy to GCP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: fourth-arena-474414-h6
  REGION: us-central1
  SERVER_SERVICE: tcg-marketplace-server
  CLIENT_SERVICE: tcg-marketplace-client
  WORKER_SERVICE: tcg-marketplace-worker
  SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}
  CLIENT_DOMAIN: ${{ secrets.CLIENT_DOMAIN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install server dependencies
        run: cd server && npm ci
      - name: Run server tests
        run: cd server && npm test || echo "No tests found, continuing..."

      - name: Install client dependencies
        run: cd client && npm ci
      - name: Run client tests
        run: cd client && npm test || echo "No tests found, continuing..."
      - name: Build client
        run: cd client && npm run build

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Build and push server image
        run: gcloud builds submit --tag gcr.io/$PROJECT_ID/$SERVER_SERVICE:latest ./server

      - name: Build and push worker image
        run: gcloud builds submit --tag gcr.io/$PROJECT_ID/$WORKER_SERVICE:latest ./worker

      - name: Build and push client image
        run: gcloud builds submit --tag gcr.io/$PROJECT_ID/$CLIENT_SERVICE:latest ./client

  deploy-server:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      SERVER_URL: ${{ steps.server-url.outputs.SERVER_URL }}
    
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy server to Cloud Run
        run: |
          gcloud run deploy $SERVER_SERVICE \
            --image gcr.io/$PROJECT_ID/$SERVER_SERVICE:latest \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --port 5000 \
            --memory 1Gi \
            --cpu 1 \
            --set-env-vars NODE_ENV=production \
            --set-secrets="FIREBASE_SERVICE_ACCOUNT_JSON=FIREBASE_SERVICE_ACCOUNT_JSON:latest"

      - name: Get server URL
        id: server-url
        run: |
          SERVER_URL=$(gcloud run services describe $SERVER_SERVICE --platform managed --region $REGION --format 'value(status.url)')
          echo "SERVER_URL=$SERVER_URL" >> $GITHUB_OUTPUT

  deploy-worker:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy worker to Cloud Run
        run: |
          gcloud run deploy $WORKER_SERVICE \
            --image gcr.io/$PROJECT_ID/$WORKER_SERVICE:latest \
            --platform managed \
            --region $REGION \
            --no-allow-unauthenticated \
            --port 4000 \
            --memory 2Gi \
            --cpu 2 \
            --set-env-vars NODE_ENV=production \
            --set-secrets="FIREBASE_SERVICE_ACCOUNT_JSON=FIREBASE_SERVICE_ACCOUNT_JSON:latest"

  deploy-client:
    needs: deploy-server
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy client to Cloud Run
        env:
          SERVER_URL: ${{ needs.deploy-server.outputs.SERVER_URL }}
        run: |
          if [ -n "$SERVER_DOMAIN" ]; then
            API_URL="https://$SERVER_DOMAIN/api"
          else
            API_URL="$SERVER_URL/api"
          fi
          gcloud run deploy $CLIENT_SERVICE \
            --image gcr.io/$PROJECT_ID/$CLIENT_SERVICE:latest \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --port 3000 \
            --memory 1Gi \
            --cpu 1 \
            --set-env-vars VITE_API_URL=$API_URL

      - name: Get client URL
        run: |
          CLIENT_URL=$(gcloud run services describe $CLIENT_SERVICE --platform managed --region $REGION --format 'value(status.url)')
          echo "Client deployed at: $CLIENT_URL"
          echo "üåç Your application is live at: ${CLIENT_DOMAIN:-$CLIENT_URL}"
          